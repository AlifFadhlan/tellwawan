// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  USER
  REKRUTER
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRoles       @default(USER)
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  job_child Job_Child[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Job_Parent {
  id            String          @id @default(cuid())
  name          String
  question      String?    @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  job_child Job_Child[]
}

model Job_Child {
  id            String          @id @default(cuid())
  parent_id     String
  user_id       String
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parent Job_Parent @relation(fields: [parent_id], references: [id])
  user User @relation(fields: [user_id], references: [id])


  @@index([parent_id])
  @@index([user_id])
}

model userstest {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
}

model Interview {
  id            String          @id @default(cuid())
  user_id       String?
  jobparent_id        String?
  chathistory   String?    @db.Text
  summary       String?    @db.Text
  status        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([jobparent_id])
  @@index([user_id])
}
